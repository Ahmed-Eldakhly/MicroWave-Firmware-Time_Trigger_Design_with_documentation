Version 4.0 HI-TECH Software Intermediate Code
"47 scheduler.c
[; ;scheduler.c: 47: static StructScheduler_Object_t Scheduler_Tasks[10u];
[c E11 0 1 .. ]
[n E11 . ONCE REPEAT  ]
[c E119 0 1 2 .. ]
[n E119 . READY RUNNING WAITING  ]
[v F131 `(v ~T0 @X0 0 tf ]
"32
[; ;scheduler.c: 32: typedef struct {
[s S3 `uc 1 `us 1 `us 1 `E11 1 `E119 1 `*F131 1 ]
[n S3 . Task_ID Task_ExecutionTime Task_Periodicity Task_RepeatType Task_State Task_Function ]
"151 ./timers.h
[; ;./timers.h: 151: extern void Timer0_write_counter(uint16 a_u16init_value_for_timer);
[v _Timer0_write_counter `(v ~T0 @X0 0 ef1`us ]
"108 scheduler.c
[; ;scheduler.c: 108: static EnumScheduler_Error_t Scheduler_Tick_time_calculation(TickTime a_u8tickTme)
[c E15 0 1 2 3 .. ]
[n E15 . SCHEDULER_NOT_AVAILABLE_TICK_TIME_ERROR SCHEDULER_TASKS_QUEUE_IS_FULL_ERROR SCHEDULER_ID_IS_NOT_EXIST_ERROR SCHEDULER_NO_ERROR  ]
"117
[; ;scheduler.c: 117:         Timer0_config_t.timer_prescaler_t = TIMER0_NO_PRESCALER;
[c E42 0 1 2 3 4 5 6 7 8 .. ]
[n E42 . TIMER0_PRESCALER_2 TIMER0_PRESCALER_4 TIMER0_PRESCALER_8 TIMER0_PRESCALER_16 TIMER0_PRESCALER_32 TIMER0_PRESCALER_64 TIMER0_PRESCALER_128 TIMER0_PRESCALER_256 TIMER0_NO_PRESCALER  ]
[c E34 0 1 .. ]
[n E34 . TIMER_8BIT_SIZE TIMER_16BIT_SIZE  ]
[c E38 0 1 .. ]
[n E38 . TIMER_INTERNAL_CLOCK TIMER_TRANSITION_ON_TCKI_PIN  ]
[c E53 0 1 2 .. ]
[n E53 . TIMER0_RISING_EDGE_CLOCK_ON_TCKI TIMER0_FALLING_EDGE_CLOCK_ON_TCKI TIMER0_NO_TRANSITION_ON_TCKI  ]
"68 ./timers.h
[; ;./timers.h: 68: typedef struct{
[s S1 `E42 1 `E34 1 `E38 1 `E53 1 ]
[n S1 . timer_prescaler_t timer_size_t timer_clock_source_t timer_edge_type_on_TCKI_t ]
"79
[; ;./timers.h: 79: extern StrTimer0_config_t Timer0_config_t;
[v _Timer0_config_t `S1 ~T0 @X0 0 e ]
"98
[; ;./timers.h: 98: extern void Timer0_Initialization(void);
[v _Timer0_Initialization `(v ~T0 @X0 0 ef ]
[v F115 `(v ~T0 @X0 0 tf ]
"268 ./interrupt.h
[; ;./interrupt.h: 268: extern void Timer0_set_callback_function(void(*a_function_ptr)(void));
[v _Timer0_set_callback_function `(v ~T0 @X0 0 ef1`*F115 ]
"44
[; ;./interrupt.h: 44: extern void Global_interrupt_enable(void);
[v _Global_interrupt_enable `(v ~T0 @X0 0 ef ]
[v F147 `(v ~T0 @X0 0 tf ]
"111 ./timers.h
[; ;./timers.h: 111: extern void Timer0_enable(void);
[v _Timer0_enable `(v ~T0 @X0 0 ef ]
[v F150 `(v ~T0 @X0 0 tf ]
[v F152 `(v ~T0 @X0 0 tf ]
"242 ./interrupt.h
[; ;./interrupt.h: 242: extern void Timer0_enable_overflow_interrupt(void);
[v _Timer0_enable_overflow_interrupt `(v ~T0 @X0 0 ef ]
[v F166 `(v ~T0 @X0 0 tf ]
"255
[; ;./interrupt.h: 255: extern void Timer0_disable_overflow_interrupt(void);
[v _Timer0_disable_overflow_interrupt `(v ~T0 @X0 0 ef ]
[v F173 `(v ~T0 @X0 0 tf ]
"33 ./CPU_sleep.h
[; ;./CPU_sleep.h: 33: extern void CPU_sleep(void);
[v _CPU_sleep `(v ~T0 @X0 0 ef ]
"45 scheduler.c
[; ;scheduler.c: 45: volatile static uint16 g_u16_TickTimeCounter = 0;
[v _g_u16_TickTimeCounter `Vus ~T0 @X0 1 s ]
[i _g_u16_TickTimeCounter
-> -> 0 `i `us
]
"47
[; ;scheduler.c: 47: static StructScheduler_Object_t Scheduler_Tasks[10u];
[v _Scheduler_Tasks `S3 ~T0 @X0 -> 10 `i s ]
"49
[; ;scheduler.c: 49: uint32 u32compare_value;
[v _u32compare_value `ul ~T0 @X0 1 e ]
"71
[; ;scheduler.c: 71: static void Scheduler_Core(void)
[v _Scheduler_Core `(v ~T0 @X0 1 sf ]
"72
[; ;scheduler.c: 72: {
{
[e :U _Scheduler_Core ]
[f ]
"74
[; ;scheduler.c: 74:  g_u16_TickTimeCounter++;
[e ++ _g_u16_TickTimeCounter -> -> 1 `i `Vus ]
"76
[; ;scheduler.c: 76:     Timer0_write_counter(65535u - u32compare_value);
[e ( _Timer0_write_counter (1 -> - -> -> 65535 `ui `ul _u32compare_value `us ]
"78
[; ;scheduler.c: 78:  for(uint16 Counter = 0 ; Counter < 10u ; Counter++)
{
[v _Counter `us ~T0 @X0 1 a ]
[e = _Counter -> -> 0 `i `us ]
[e $ < -> _Counter `ui -> 10 `ui 5  ]
[e $U 6  ]
[e :U 5 ]
"79
[; ;scheduler.c: 79:  {
{
"81
[; ;scheduler.c: 81:   if((Scheduler_Tasks[Counter].Task_ExecutionTime == g_u16_TickTimeCounter)
[e $ ! && == -> . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 1 `ui -> _g_u16_TickTimeCounter `ui != -> . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 0 `i -> 0 `i 8  ]
"83
[; ;scheduler.c: 83:   {
{
"85
[; ;scheduler.c: 85:    Scheduler_Tasks[Counter].Task_State = READY;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 4 . `E119 0 ]
"87
[; ;scheduler.c: 87:             Scheduler_Tasks[Counter].Task_ExecutionTime += Scheduler_Tasks[Counter].Task_Periodicity;
[e =+ . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 1 -> . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 2 `us ]
"88
[; ;scheduler.c: 88:   }
}
[e $U 9  ]
"89
[; ;scheduler.c: 89:   else
[e :U 8 ]
"90
[; ;scheduler.c: 90:   {
{
"92
[; ;scheduler.c: 92:   }
}
[e :U 9 ]
"93
[; ;scheduler.c: 93:  }
}
[e ++ _Counter -> -> 1 `i `us ]
[e $ < -> _Counter `ui -> 10 `ui 5  ]
[e :U 6 ]
}
"94
[; ;scheduler.c: 94: }
[e :UE 4 ]
}
"108
[; ;scheduler.c: 108: static EnumScheduler_Error_t Scheduler_Tick_time_calculation(TickTime a_u8tickTme)
[v _Scheduler_Tick_time_calculation `(E15 ~T0 @X0 1 sf1`uc ]
"109
[; ;scheduler.c: 109: {
{
[e :U _Scheduler_Tick_time_calculation ]
"108
[; ;scheduler.c: 108: static EnumScheduler_Error_t Scheduler_Tick_time_calculation(TickTime a_u8tickTme)
[v _a_u8tickTme `uc ~T0 @X0 1 r1 ]
"109
[; ;scheduler.c: 109: {
[f ]
"111
[; ;scheduler.c: 111:     EnumScheduler_Error_t tick_calculation_t = SCHEDULER_NO_ERROR;
[v _tick_calculation_t `E15 ~T0 @X0 1 a ]
[e = _tick_calculation_t . `E15 3 ]
"113
[; ;scheduler.c: 113:     u32compare_value = (8000000u / 4000) * a_u8tickTme;
[e = _u32compare_value * / -> 8000000 `ul -> -> -> 4000 `i `l `ul -> _a_u8tickTme `ul ]
"115
[; ;scheduler.c: 115:     if(u32compare_value < 65535u)
[e $ ! < _u32compare_value -> -> 65535 `ui `ul 11  ]
"116
[; ;scheduler.c: 116:     {
{
"117
[; ;scheduler.c: 117:         Timer0_config_t.timer_prescaler_t = TIMER0_NO_PRESCALER;
[e = . _Timer0_config_t 0 . `E42 8 ]
"119
[; ;scheduler.c: 119:         Timer0_Initialization();
[e ( _Timer0_Initialization ..  ]
"120
[; ;scheduler.c: 120:         tick_calculation_t = SCHEDULER_NO_ERROR;
[e = _tick_calculation_t . `E15 3 ]
"121
[; ;scheduler.c: 121:     }
}
[e $U 12  ]
"122
[; ;scheduler.c: 122:     else if (u32compare_value / 2 < 65535u)
[e :U 11 ]
[e $ ! < / _u32compare_value -> -> -> 2 `i `l `ul -> -> 65535 `ui `ul 13  ]
"123
[; ;scheduler.c: 123:     {
{
"124
[; ;scheduler.c: 124:         Timer0_config_t.timer_prescaler_t = TIMER0_PRESCALER_2;
[e = . _Timer0_config_t 0 . `E42 0 ]
"125
[; ;scheduler.c: 125:         u32compare_value /= 2;
[e =/ _u32compare_value -> -> -> 2 `i `l `ul ]
"127
[; ;scheduler.c: 127:         Timer0_Initialization();
[e ( _Timer0_Initialization ..  ]
"128
[; ;scheduler.c: 128:         tick_calculation_t = SCHEDULER_NO_ERROR;
[e = _tick_calculation_t . `E15 3 ]
"129
[; ;scheduler.c: 129:     }
}
[e $U 14  ]
"130
[; ;scheduler.c: 130:     else if (u32compare_value / 4 < 65535u)
[e :U 13 ]
[e $ ! < / _u32compare_value -> -> -> 4 `i `l `ul -> -> 65535 `ui `ul 15  ]
"131
[; ;scheduler.c: 131:     {
{
"132
[; ;scheduler.c: 132:         Timer0_config_t.timer_prescaler_t = TIMER0_PRESCALER_4;
[e = . _Timer0_config_t 0 . `E42 1 ]
"133
[; ;scheduler.c: 133:         u32compare_value /= 4;
[e =/ _u32compare_value -> -> -> 4 `i `l `ul ]
"135
[; ;scheduler.c: 135:         Timer0_Initialization();
[e ( _Timer0_Initialization ..  ]
"136
[; ;scheduler.c: 136:         tick_calculation_t = SCHEDULER_NO_ERROR;
[e = _tick_calculation_t . `E15 3 ]
"137
[; ;scheduler.c: 137:     }
}
[e $U 16  ]
"138
[; ;scheduler.c: 138:     else if (u32compare_value / 8 < 65535u)
[e :U 15 ]
[e $ ! < / _u32compare_value -> -> -> 8 `i `l `ul -> -> 65535 `ui `ul 17  ]
"139
[; ;scheduler.c: 139:     {
{
"140
[; ;scheduler.c: 140:         Timer0_config_t.timer_prescaler_t = TIMER0_PRESCALER_8;
[e = . _Timer0_config_t 0 . `E42 2 ]
"141
[; ;scheduler.c: 141:         u32compare_value /= 8;
[e =/ _u32compare_value -> -> -> 8 `i `l `ul ]
"143
[; ;scheduler.c: 143:         Timer0_Initialization();
[e ( _Timer0_Initialization ..  ]
"144
[; ;scheduler.c: 144:         tick_calculation_t = SCHEDULER_NO_ERROR;
[e = _tick_calculation_t . `E15 3 ]
"145
[; ;scheduler.c: 145:     }
}
[e $U 18  ]
"146
[; ;scheduler.c: 146:     else if (u32compare_value / 16 < 65535u)
[e :U 17 ]
[e $ ! < / _u32compare_value -> -> -> 16 `i `l `ul -> -> 65535 `ui `ul 19  ]
"147
[; ;scheduler.c: 147:     {
{
"148
[; ;scheduler.c: 148:         Timer0_config_t.timer_prescaler_t = TIMER0_PRESCALER_16;
[e = . _Timer0_config_t 0 . `E42 3 ]
"149
[; ;scheduler.c: 149:         u32compare_value /= 16;
[e =/ _u32compare_value -> -> -> 16 `i `l `ul ]
"151
[; ;scheduler.c: 151:         Timer0_Initialization();
[e ( _Timer0_Initialization ..  ]
"152
[; ;scheduler.c: 152:         tick_calculation_t = SCHEDULER_NO_ERROR;
[e = _tick_calculation_t . `E15 3 ]
"153
[; ;scheduler.c: 153:     }
}
[e $U 20  ]
"154
[; ;scheduler.c: 154:     else if (u32compare_value / 32 < 65535u)
[e :U 19 ]
[e $ ! < / _u32compare_value -> -> -> 32 `i `l `ul -> -> 65535 `ui `ul 21  ]
"155
[; ;scheduler.c: 155:     {
{
"156
[; ;scheduler.c: 156:         Timer0_config_t.timer_prescaler_t = TIMER0_PRESCALER_32;
[e = . _Timer0_config_t 0 . `E42 4 ]
"157
[; ;scheduler.c: 157:         u32compare_value /= 32;
[e =/ _u32compare_value -> -> -> 32 `i `l `ul ]
"159
[; ;scheduler.c: 159:         Timer0_Initialization();
[e ( _Timer0_Initialization ..  ]
"160
[; ;scheduler.c: 160:         tick_calculation_t = SCHEDULER_NO_ERROR;
[e = _tick_calculation_t . `E15 3 ]
"161
[; ;scheduler.c: 161:     }
}
[e $U 22  ]
"162
[; ;scheduler.c: 162:     else if (u32compare_value / 64 < 65535u)
[e :U 21 ]
[e $ ! < / _u32compare_value -> -> -> 64 `i `l `ul -> -> 65535 `ui `ul 23  ]
"163
[; ;scheduler.c: 163:     {
{
"164
[; ;scheduler.c: 164:         Timer0_config_t.timer_prescaler_t = TIMER0_PRESCALER_64;
[e = . _Timer0_config_t 0 . `E42 5 ]
"165
[; ;scheduler.c: 165:         u32compare_value /= 64;
[e =/ _u32compare_value -> -> -> 64 `i `l `ul ]
"167
[; ;scheduler.c: 167:         Timer0_Initialization();
[e ( _Timer0_Initialization ..  ]
"168
[; ;scheduler.c: 168:         tick_calculation_t = SCHEDULER_NO_ERROR;
[e = _tick_calculation_t . `E15 3 ]
"169
[; ;scheduler.c: 169:     }
}
[e $U 24  ]
"170
[; ;scheduler.c: 170:     else if (u32compare_value / 128 < 65535u)
[e :U 23 ]
[e $ ! < / _u32compare_value -> -> -> 128 `i `l `ul -> -> 65535 `ui `ul 25  ]
"171
[; ;scheduler.c: 171:     {
{
"172
[; ;scheduler.c: 172:         Timer0_config_t.timer_prescaler_t = TIMER0_PRESCALER_128;
[e = . _Timer0_config_t 0 . `E42 6 ]
"173
[; ;scheduler.c: 173:         u32compare_value /= 128;
[e =/ _u32compare_value -> -> -> 128 `i `l `ul ]
"175
[; ;scheduler.c: 175:         Timer0_Initialization();
[e ( _Timer0_Initialization ..  ]
"176
[; ;scheduler.c: 176:         tick_calculation_t = SCHEDULER_NO_ERROR;
[e = _tick_calculation_t . `E15 3 ]
"177
[; ;scheduler.c: 177:     }
}
[e $U 26  ]
"178
[; ;scheduler.c: 178:     else if (u32compare_value / 256 < 65535u)
[e :U 25 ]
[e $ ! < / _u32compare_value -> -> -> 256 `i `l `ul -> -> 65535 `ui `ul 27  ]
"179
[; ;scheduler.c: 179:     {
{
"180
[; ;scheduler.c: 180:         Timer0_config_t.timer_prescaler_t = TIMER0_PRESCALER_256;
[e = . _Timer0_config_t 0 . `E42 7 ]
"181
[; ;scheduler.c: 181:         u32compare_value /= 256;
[e =/ _u32compare_value -> -> -> 256 `i `l `ul ]
"183
[; ;scheduler.c: 183:         Timer0_Initialization();
[e ( _Timer0_Initialization ..  ]
"184
[; ;scheduler.c: 184:         tick_calculation_t = SCHEDULER_NO_ERROR;
[e = _tick_calculation_t . `E15 3 ]
"185
[; ;scheduler.c: 185:     }
}
[e $U 28  ]
"186
[; ;scheduler.c: 186:     else
[e :U 27 ]
"187
[; ;scheduler.c: 187:     {
{
"188
[; ;scheduler.c: 188:         tick_calculation_t = SCHEDULER_NOT_AVAILABLE_TICK_TIME_ERROR;
[e = _tick_calculation_t . `E15 0 ]
"189
[; ;scheduler.c: 189:     }
}
[e :U 28 ]
[e :U 26 ]
[e :U 24 ]
[e :U 22 ]
[e :U 20 ]
[e :U 18 ]
[e :U 16 ]
[e :U 14 ]
[e :U 12 ]
"190
[; ;scheduler.c: 190:     return tick_calculation_t;
[e ) _tick_calculation_t ]
[e $UE 10  ]
"191
[; ;scheduler.c: 191: }
[e :UE 10 ]
}
"207
[; ;scheduler.c: 207: EnumScheduler_Error_t Scheduler_Initialization(TickTime a_u8tickTme)
[v _Scheduler_Initialization `(E15 ~T0 @X0 1 ef1`uc ]
"208
[; ;scheduler.c: 208: {
{
[e :U _Scheduler_Initialization ]
"207
[; ;scheduler.c: 207: EnumScheduler_Error_t Scheduler_Initialization(TickTime a_u8tickTme)
[v _a_u8tickTme `uc ~T0 @X0 1 r1 ]
"208
[; ;scheduler.c: 208: {
[f ]
"210
[; ;scheduler.c: 210:     EnumScheduler_Error_t initialization_error_t = SCHEDULER_NO_ERROR;
[v _initialization_error_t `E15 ~T0 @X0 1 a ]
[e = _initialization_error_t . `E15 3 ]
"212
[; ;scheduler.c: 212:     initialization_error_t = Scheduler_Tick_time_calculation(a_u8tickTme);
[e = _initialization_error_t ( _Scheduler_Tick_time_calculation (1 _a_u8tickTme ]
"214
[; ;scheduler.c: 214:     if(initialization_error_t == SCHEDULER_NO_ERROR)
[e $ ! == -> _initialization_error_t `ui -> . `E15 3 `ui 30  ]
"215
[; ;scheduler.c: 215:     {
{
"217
[; ;scheduler.c: 217:         Timer0_set_callback_function(Scheduler_Core);
[e ( _Timer0_set_callback_function (1 &U _Scheduler_Core ]
"219
[; ;scheduler.c: 219:         Global_interrupt_enable();
[e ( _Global_interrupt_enable ..  ]
"221
[; ;scheduler.c: 221:         for(uint16 Counter = 0 ; Counter < 10u ; Counter++)
{
[v _Counter `us ~T0 @X0 1 a ]
[e = _Counter -> -> 0 `i `us ]
[e $ < -> _Counter `ui -> 10 `ui 31  ]
[e $U 32  ]
[e :U 31 ]
"222
[; ;scheduler.c: 222:         {
{
"223
[; ;scheduler.c: 223:             Scheduler_Tasks[Counter].Task_ID = 0;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 0 -> -> 0 `i `uc ]
"224
[; ;scheduler.c: 224:             Scheduler_Tasks[Counter].Task_Periodicity = 0;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 2 -> -> 0 `i `us ]
"225
[; ;scheduler.c: 225:             Scheduler_Tasks[Counter].Task_RepeatType = ONCE;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 3 . `E11 0 ]
"226
[; ;scheduler.c: 226:             Scheduler_Tasks[Counter].Task_ExecutionTime = 0;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 1 -> -> 0 `i `us ]
"227
[; ;scheduler.c: 227:             Scheduler_Tasks[Counter].Task_State = WAITING;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 4 . `E119 2 ]
"228
[; ;scheduler.c: 228:             Scheduler_Tasks[Counter].Task_Function = (void*)0x00;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 5 -> -> -> 0 `i `*v `*F147 ]
"229
[; ;scheduler.c: 229:         }
}
[e ++ _Counter -> -> 1 `i `us ]
[e $ < -> _Counter `ui -> 10 `ui 31  ]
[e :U 32 ]
}
"231
[; ;scheduler.c: 231:         Timer0_enable();
[e ( _Timer0_enable ..  ]
"232
[; ;scheduler.c: 232:     }
}
[e $U 34  ]
"233
[; ;scheduler.c: 233:     else
[e :U 30 ]
"234
[; ;scheduler.c: 234:     {
{
"235
[; ;scheduler.c: 235:         initialization_error_t = SCHEDULER_NOT_AVAILABLE_TICK_TIME_ERROR;
[e = _initialization_error_t . `E15 0 ]
"236
[; ;scheduler.c: 236:     }
}
[e :U 34 ]
"237
[; ;scheduler.c: 237:     return initialization_error_t;
[e ) _initialization_error_t ]
[e $UE 29  ]
"238
[; ;scheduler.c: 238: }
[e :UE 29 ]
}
"255
[; ;scheduler.c: 255: EnumScheduler_Error_t Scheduler_StartFunction(void (*task_function_ptr) (void), uint8 a_u8_task_ID ,
[v _Scheduler_StartFunction `(E15 ~T0 @X0 1 ef5`*F150`uc`us`us`E11 ]
"258
[; ;scheduler.c: 258: {
{
[e :U _Scheduler_StartFunction ]
"255
[; ;scheduler.c: 255: EnumScheduler_Error_t Scheduler_StartFunction(void (*task_function_ptr) (void), uint8 a_u8_task_ID ,
[v _task_function_ptr `*F152 ~T0 @X0 1 r1 ]
[v _a_u8_task_ID `uc ~T0 @X0 1 r2 ]
"256
[; ;scheduler.c: 256:   uint16 a_u16_task_periodicity , uint16 a_u16_task_start_time ,
[v _a_u16_task_periodicity `us ~T0 @X0 1 r3 ]
[v _a_u16_task_start_time `us ~T0 @X0 1 r4 ]
"257
[; ;scheduler.c: 257:         EnumScheduler_RepeatedFunction_t Enum_Task_RepeatType)
[v _Enum_Task_RepeatType `E11 ~T0 @X0 1 r5 ]
"258
[; ;scheduler.c: 258: {
[f ]
"260
[; ;scheduler.c: 260:     EnumScheduler_Error_t starting_task_error = SCHEDULER_NO_ERROR;
[v _starting_task_error `E15 ~T0 @X0 1 a ]
[e = _starting_task_error . `E15 3 ]
"262
[; ;scheduler.c: 262:  Timer0_enable_overflow_interrupt();
[e ( _Timer0_enable_overflow_interrupt ..  ]
"264
[; ;scheduler.c: 264:  for(uint16 Counter = 0 ; Counter < 10u ; Counter++)
{
[v _Counter `us ~T0 @X0 1 a ]
[e = _Counter -> -> 0 `i `us ]
[e $ < -> _Counter `ui -> 10 `ui 36  ]
[e $U 37  ]
[e :U 36 ]
"265
[; ;scheduler.c: 265:  {
{
"266
[; ;scheduler.c: 266:   if(Scheduler_Tasks[Counter].Task_ID == 0)
[e $ ! == -> . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 0 `i -> 0 `i 39  ]
"267
[; ;scheduler.c: 267:   {
{
"268
[; ;scheduler.c: 268:    Scheduler_Tasks[Counter].Task_ID = a_u8_task_ID;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 0 _a_u8_task_ID ]
"269
[; ;scheduler.c: 269:    Scheduler_Tasks[Counter].Task_Periodicity = a_u16_task_periodicity;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 2 _a_u16_task_periodicity ]
"270
[; ;scheduler.c: 270:    Scheduler_Tasks[Counter].Task_RepeatType = Enum_Task_RepeatType;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 3 _Enum_Task_RepeatType ]
"271
[; ;scheduler.c: 271:    Scheduler_Tasks[Counter].Task_ExecutionTime = a_u16_task_start_time + g_u16_TickTimeCounter + 1;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 1 -> + + -> _a_u16_task_start_time `ui -> _g_u16_TickTimeCounter `ui -> -> 1 `i `ui `us ]
"272
[; ;scheduler.c: 272:    Scheduler_Tasks[Counter].Task_State = WAITING;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 4 . `E119 2 ]
"273
[; ;scheduler.c: 273:    Scheduler_Tasks[Counter].Task_Function = task_function_ptr;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 5 _task_function_ptr ]
"274
[; ;scheduler.c: 274:             starting_task_error = SCHEDULER_NO_ERROR;
[e = _starting_task_error . `E15 3 ]
"275
[; ;scheduler.c: 275:    break;
[e $U 37  ]
"276
[; ;scheduler.c: 276:   }
}
[e $U 40  ]
"277
[; ;scheduler.c: 277:   else
[e :U 39 ]
"278
[; ;scheduler.c: 278:   {
{
"279
[; ;scheduler.c: 279:    starting_task_error = SCHEDULER_TASKS_QUEUE_IS_FULL_ERROR;
[e = _starting_task_error . `E15 1 ]
"280
[; ;scheduler.c: 280:   }
}
[e :U 40 ]
"281
[; ;scheduler.c: 281:  }
}
[e ++ _Counter -> -> 1 `i `us ]
[e $ < -> _Counter `ui -> 10 `ui 36  ]
[e :U 37 ]
}
"282
[; ;scheduler.c: 282:     return starting_task_error;
[e ) _starting_task_error ]
[e $UE 35  ]
"283
[; ;scheduler.c: 283: }
[e :UE 35 ]
}
"296
[; ;scheduler.c: 296: EnumScheduler_Error_t Scheduler_StopFunction(uint8 a_u8_task_ID)
[v _Scheduler_StopFunction `(E15 ~T0 @X0 1 ef1`uc ]
"297
[; ;scheduler.c: 297: {
{
[e :U _Scheduler_StopFunction ]
"296
[; ;scheduler.c: 296: EnumScheduler_Error_t Scheduler_StopFunction(uint8 a_u8_task_ID)
[v _a_u8_task_ID `uc ~T0 @X0 1 r1 ]
"297
[; ;scheduler.c: 297: {
[f ]
"299
[; ;scheduler.c: 299:     EnumScheduler_Error_t stoping_task_error = SCHEDULER_NO_ERROR;
[v _stoping_task_error `E15 ~T0 @X0 1 a ]
[e = _stoping_task_error . `E15 3 ]
"301
[; ;scheduler.c: 301:  for(uint16 Counter=0;Counter<10u;Counter++)
{
[v _Counter `us ~T0 @X0 1 a ]
[e = _Counter -> -> 0 `i `us ]
[e $ < -> _Counter `ui -> 10 `ui 42  ]
[e $U 43  ]
[e :U 42 ]
"302
[; ;scheduler.c: 302:  {
{
"303
[; ;scheduler.c: 303:   if(Scheduler_Tasks[Counter].Task_ID == a_u8_task_ID)
[e $ ! == -> . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 0 `i -> _a_u8_task_ID `i 45  ]
"304
[; ;scheduler.c: 304:   {
{
"305
[; ;scheduler.c: 305:    Scheduler_Tasks[Counter].Task_ID = 0;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 0 -> -> 0 `i `uc ]
"306
[; ;scheduler.c: 306:    Scheduler_Tasks[Counter].Task_Periodicity = 0;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 2 -> -> 0 `i `us ]
"307
[; ;scheduler.c: 307:    Scheduler_Tasks[Counter].Task_RepeatType = ONCE;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 3 . `E11 0 ]
"308
[; ;scheduler.c: 308:    Scheduler_Tasks[Counter].Task_ExecutionTime = 0;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 1 -> -> 0 `i `us ]
"309
[; ;scheduler.c: 309:    Scheduler_Tasks[Counter].Task_State = WAITING;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 4 . `E119 2 ]
"310
[; ;scheduler.c: 310:    Scheduler_Tasks[Counter].Task_Function = (void*)0x00;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 5 -> -> -> 0 `i `*v `*F166 ]
"311
[; ;scheduler.c: 311:             stoping_task_error = SCHEDULER_NO_ERROR;
[e = _stoping_task_error . `E15 3 ]
"312
[; ;scheduler.c: 312:    break;
[e $U 43  ]
"313
[; ;scheduler.c: 313:   }
}
[e $U 46  ]
"314
[; ;scheduler.c: 314:   else
[e :U 45 ]
"315
[; ;scheduler.c: 315:   {
{
"316
[; ;scheduler.c: 316:    stoping_task_error = SCHEDULER_ID_IS_NOT_EXIST_ERROR;
[e = _stoping_task_error . `E15 2 ]
"317
[; ;scheduler.c: 317:   }
}
[e :U 46 ]
"318
[; ;scheduler.c: 318:  }
}
[e ++ _Counter -> -> 1 `i `us ]
[e $ < -> _Counter `ui -> 10 `ui 42  ]
[e :U 43 ]
}
"320
[; ;scheduler.c: 320:  uint16 Counter = 0 ;
[v _Counter `us ~T0 @X0 1 a ]
[e = _Counter -> -> 0 `i `us ]
"322
[; ;scheduler.c: 322:  for(; Counter < 10u ; Counter++)
{
[e $ < -> _Counter `ui -> 10 `ui 47  ]
[e $U 48  ]
[e :U 47 ]
"323
[; ;scheduler.c: 323:  {
{
"324
[; ;scheduler.c: 324:   if(Scheduler_Tasks[Counter].Task_ID != 0)
[e $ ! != -> . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 0 `i -> 0 `i 50  ]
"325
[; ;scheduler.c: 325:   {
{
"326
[; ;scheduler.c: 326:    break;
[e $U 48  ]
"327
[; ;scheduler.c: 327:   }
}
[e $U 51  ]
"328
[; ;scheduler.c: 328:   else
[e :U 50 ]
"329
[; ;scheduler.c: 329:   {
{
"331
[; ;scheduler.c: 331:   }
}
[e :U 51 ]
"332
[; ;scheduler.c: 332:  }
}
[e ++ _Counter -> -> 1 `i `us ]
[e $ < -> _Counter `ui -> 10 `ui 47  ]
[e :U 48 ]
}
"334
[; ;scheduler.c: 334:  if(Counter == 10u)
[e $ ! == -> _Counter `ui -> 10 `ui 52  ]
"335
[; ;scheduler.c: 335:  {
{
"337
[; ;scheduler.c: 337:   Timer0_disable_overflow_interrupt();
[e ( _Timer0_disable_overflow_interrupt ..  ]
"338
[; ;scheduler.c: 338:  }
}
[e $U 53  ]
"339
[; ;scheduler.c: 339:  else
[e :U 52 ]
"340
[; ;scheduler.c: 340:  {
{
"342
[; ;scheduler.c: 342:  }
}
[e :U 53 ]
"343
[; ;scheduler.c: 343:     return stoping_task_error;
[e ) _stoping_task_error ]
[e $UE 41  ]
"344
[; ;scheduler.c: 344: }
[e :UE 41 ]
}
"357
[; ;scheduler.c: 357: void Scheduler_Dispatcher(void)
[v _Scheduler_Dispatcher `(v ~T0 @X0 1 ef ]
"358
[; ;scheduler.c: 358: {
{
[e :U _Scheduler_Dispatcher ]
[f ]
"360
[; ;scheduler.c: 360:  for(uint16 Counter = 0 ; Counter < 10u ; Counter++)
{
[v _Counter `us ~T0 @X0 1 a ]
[e = _Counter -> -> 0 `i `us ]
[e $ < -> _Counter `ui -> 10 `ui 55  ]
[e $U 56  ]
[e :U 55 ]
"361
[; ;scheduler.c: 361:  {
{
"363
[; ;scheduler.c: 363:   if(Scheduler_Tasks[Counter].Task_State == READY)
[e $ ! == -> . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 4 `ui -> . `E119 0 `ui 58  ]
"364
[; ;scheduler.c: 364:   {
{
"365
[; ;scheduler.c: 365:    Scheduler_Tasks[Counter].Task_State = RUNNING;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 4 . `E119 1 ]
"366
[; ;scheduler.c: 366:    Scheduler_Tasks[Counter].Task_Function();
[e ( *U . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 5 ..  ]
"367
[; ;scheduler.c: 367:    Scheduler_Tasks[Counter].Task_State = WAITING;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 4 . `E119 2 ]
"369
[; ;scheduler.c: 369:             if(Scheduler_Tasks[Counter].Task_RepeatType == ONCE)
[e $ ! == -> . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 3 `ui -> . `E11 0 `ui 59  ]
"370
[; ;scheduler.c: 370:             {
{
"372
[; ;scheduler.c: 372:                 Scheduler_Tasks[Counter].Task_ID = 0;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 0 -> -> 0 `i `uc ]
"373
[; ;scheduler.c: 373:                 Scheduler_Tasks[Counter].Task_Periodicity = 0;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 2 -> -> 0 `i `us ]
"374
[; ;scheduler.c: 374:                 Scheduler_Tasks[Counter].Task_RepeatType = ONCE;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 3 . `E11 0 ]
"375
[; ;scheduler.c: 375:                 Scheduler_Tasks[Counter].Task_ExecutionTime = 0;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 1 -> -> 0 `i `us ]
"376
[; ;scheduler.c: 376:                 Scheduler_Tasks[Counter].Task_State = WAITING;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 4 . `E119 2 ]
"377
[; ;scheduler.c: 377:                 Scheduler_Tasks[Counter].Task_Function = (void*)0x00;
[e = . *U + &U _Scheduler_Tasks * -> _Counter `ux -> -> # *U &U _Scheduler_Tasks `ui `ux 5 -> -> -> 0 `i `*v `*F173 ]
"378
[; ;scheduler.c: 378:             }
}
[e $U 60  ]
"379
[; ;scheduler.c: 379:             else
[e :U 59 ]
"380
[; ;scheduler.c: 380:             {
{
"382
[; ;scheduler.c: 382:             }
}
[e :U 60 ]
"383
[; ;scheduler.c: 383:   }
}
[e $U 61  ]
"384
[; ;scheduler.c: 384:   else
[e :U 58 ]
"385
[; ;scheduler.c: 385:   {
{
"387
[; ;scheduler.c: 387:   }
}
[e :U 61 ]
"388
[; ;scheduler.c: 388:  }
}
[e ++ _Counter -> -> 1 `i `us ]
[e $ < -> _Counter `ui -> 10 `ui 55  ]
[e :U 56 ]
}
"389
[; ;scheduler.c: 389:     CPU_sleep();
[e ( _CPU_sleep ..  ]
"390
[; ;scheduler.c: 390: }
[e :UE 54 ]
}
